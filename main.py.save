import pandas as pd
import pickle
import os
from pgmpy.models import BayesianNetwork
from pgmpy.estimators import HillClimbSearch, BicScore, BDeuScore, MmhcEstimator
from pgmpy.estimators import MaximumLikelihoodEstimator
from pgmpy.inference import BeliefPropagation
from pgmpy.readwrite import BIFWriter

def preprocess_data(filepath):
    df = pd.read_csv(filepath, delimiter=',')
    print("Forma inicial del DataFrame:", df.shape)

    df = df.astype('category')
    df_encoded = df.apply(lambda col: col.cat.codes if col.dtype.name == 'category' else col)
    
    category_mappings = {
    	col: dict(enumerate(df[col].cat.categories))
    	for col in df.select_dtypes(['category']).columns
    }

    return df_encoded,category_mappings

def learn_structure(df, algorithm='hill_climb', scoring_method=None, output_path=None):
    
    for col in df.columns:
        df[col] = df[col].astype('category').cat.codes

    if algorithm == 'hill_climb':
        print(f"\nAprendiendo con Hill Climbing usando {scoring_method}...")
        est = HillClimbSearch(df)

        if scoring_method == 'bic':
            model = est.estimate(scoring_method=BicScore(df))
        elif scoring_method == 'k2':
            model = est.estimate(scoring_method='k2score', max_indegree=4, max_iter=int(1e4))
        else:
            raise ValueError("Scoring method no soportado para Hill Climbing.")

        bn_model = BayesianNetwork(model.edges())

    elif algorithm == 'mmhc':
        print("\nAprendiendo con MMHC (Max-Min Hill Climbing)...")
        mmhc = MmhcEstimator(df)
        skeleton = mmhc.mmpc()
        hc = HillClimbSearch(df)
        model = hc.estimate(
            tabu_length=10,
            white_list=skeleton.to_directed().edges(),
            scoring_method=BDeuScore(df)
        )
        bn_model = BayesianNetwork(model.edges())
    else:
        raise ValueError("Algoritmo no soportado.")

    if output_path:
        with open(output_path, 'wb') as f:
            pickle.dump(bn_model, f)
        print(f"Modelo guardado en '{output_path}'")

    print("Estructura aprendida:", bn_model.edges())
    return bn_model


def main():
    df = preprocess_data('data/df_processed.csv')

    model = learn_structure(df, algorithm='hill_climb', scoring_method='bic',
                    output_path='./uploads/model_structure_29_hillClimbing_29.pkl')

    # learn_structure(df, algorithm='hill_climb', scoring_method='k2',
    #                 output_path='./uploads/model_structure_29_hillClimbing_k2.pkl')

    # learn_structure(df, algorithm='mmhc',
    #                 output_path='./uploads/model_structure_29_mmhc.pkl')


    #MLE
    print("\nEstimando par√°metros con MLE...") 
    estimator = MaximumLikelihoodEstimator(model, df)
    # Estimate all the CPDs for `new_model`
    all_cpds = estimator.get_parameters(n_jobs=1)

    # Add the estimated CPDs to the model.
    model.add_cpds(*all_cpds)

    # Guardar el modelo en la carpeta uploads con el formato BIF
    model_file_path = os.path.join('./uploads', 'mi_modelo_red.bif')
    writer = BIFWriter(model)
    writer.write_bif(model_file_path)

    print(f"El modelo ha sido guardado en: {model_file_path}")

    #INFERENCIA
    belief_propagation = BeliefPropagation(model)
    belief_propagation.calibrate()
    
    # Definir las evidencias
    evidence = {
        'VINCULO_AGRESOR_VICTIMA': 'VINCULO RELACIONAL DE PAREJA',
        'ESTUDIA': 'NO',
        'NIVEL_EDUCATIVO_VICTIMA': 'SECUNDARIA INCOMPLETA',
        'AREA_RESIDENCIA_DOMICILIO': 'RURAL'
    }

    # Realizar la inferencia para la variable 'NIVEL_DE_RIESGO_VICTIMA'
    #samples = gibbs_chain.sample(variables=['NIVEL_DE_RIESGO_VICTIMA'], evidence=evidence, size=1000)

    # Examinar los resultados de la inferencia
    #print(samples.head())
    belief_propagation.map_query(variables=['NIVEL_DE_RIESGO_VICTIMA'],evidence=evidence)


if __name__ == "__main__":
    main()
